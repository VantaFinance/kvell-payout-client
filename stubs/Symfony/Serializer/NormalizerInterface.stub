<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\Serializer\Normalizer;

use Symfony\Component\Serializer\Exception\CircularReferenceException;
use Symfony\Component\Serializer\Exception\ExceptionInterface;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Exception\LogicException;

/**
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */
interface NormalizerInterface
{
    /**
     * Normalizes an object into a set of arrays/scalars.
     *
     * @param mixed                      $object  Object to normalize
     * @param string|null                $format  Format the normalization result will be encoded as
     * @param array<string, mixed>       $context Context options for the normalizer
     *
     * @return array<array-key,mixed>|string|int|float|bool|\ArrayObject<array-key, mixed>|null \ArrayObject is used to make sure an empty object is encoded as an object not an array
     */
    public function normalize(mixed $object, ?string $format = null, array $context = []);

    /**
     * Checks whether the given class is supported for normalization by this normalizer.
     *
     * @param mixed       $data    Data to normalize
     * @param string|null $format The format being (de-)serialized from or into
     * @param array<string, mixed>   $context Context options for the normalizer
     *
     * @return bool
     */
    public function supportsNormalization(mixed $data, ?string $format = null , array $context = []);
}
